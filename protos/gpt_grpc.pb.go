// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: gpt.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GPTHandlerClient is the client API for GPTHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GPTHandlerClient interface {
	Getanswer(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type gPTHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewGPTHandlerClient(cc grpc.ClientConnInterface) GPTHandlerClient {
	return &gPTHandlerClient{cc}
}

func (c *gPTHandlerClient) Getanswer(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protos.GPTHandler/Getanswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPTHandlerClient) GetSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/protos.GPTHandler/GetSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GPTHandlerServer is the server API for GPTHandler service.
// All implementations must embed UnimplementedGPTHandlerServer
// for forward compatibility
type GPTHandlerServer interface {
	Getanswer(context.Context, *Request) (*Response, error)
	GetSearch(context.Context, *SearchRequest) (*SearchResponse, error)
	mustEmbedUnimplementedGPTHandlerServer()
}

// UnimplementedGPTHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedGPTHandlerServer struct {
}

func (UnimplementedGPTHandlerServer) Getanswer(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getanswer not implemented")
}
func (UnimplementedGPTHandlerServer) GetSearch(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearch not implemented")
}
func (UnimplementedGPTHandlerServer) mustEmbedUnimplementedGPTHandlerServer() {}

// UnsafeGPTHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GPTHandlerServer will
// result in compilation errors.
type UnsafeGPTHandlerServer interface {
	mustEmbedUnimplementedGPTHandlerServer()
}

func RegisterGPTHandlerServer(s grpc.ServiceRegistrar, srv GPTHandlerServer) {
	s.RegisterService(&GPTHandler_ServiceDesc, srv)
}

func _GPTHandler_Getanswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPTHandlerServer).Getanswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GPTHandler/Getanswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPTHandlerServer).Getanswer(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPTHandler_GetSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPTHandlerServer).GetSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GPTHandler/GetSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPTHandlerServer).GetSearch(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GPTHandler_ServiceDesc is the grpc.ServiceDesc for GPTHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GPTHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.GPTHandler",
	HandlerType: (*GPTHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Getanswer",
			Handler:    _GPTHandler_Getanswer_Handler,
		},
		{
			MethodName: "GetSearch",
			Handler:    _GPTHandler_GetSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gpt.proto",
}
